[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "code_review_agent",
        "importPath": "code_review_agent",
        "description": "code_review_agent",
        "isExtraImport": true,
        "detail": "code_review_agent",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "StateGraph",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "START",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "ChatGroq",
        "importPath": "langchain_groq",
        "description": "langchain_groq",
        "isExtraImport": true,
        "detail": "langchain_groq",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "SystemMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "get_github_app_token",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {\n        'iat': now,\n        'exp': now + (10 * 60),  # 10 minutes\n        'iss': GITHUB_APP_ID\n    }\n    # Load private key\n    private_key = GITHUB_PRIVATE_KEY.replace('\\\\n', '\\n')",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "get_installation_token",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_installation_token(installation_id):\n    \"\"\"Get installation access token\"\"\"\n    jwt_token = get_github_app_token()\n    url = f\"https://api.github.com/app/installations/{installation_id}/access_tokens\"\n    headers = {\n        'Authorization': f'Bearer {jwt_token}',\n        'Accept': 'application/vnd.github.v3+json'\n    }\n    response = requests.post(url, headers=headers)\n    return response.json()['token']",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "create_webhook",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def create_webhook(repo_full_name, installation_token):\n    \"\"\"Create webhook for the repository\"\"\"\n    url = f\"https://api.github.com/repos/{repo_full_name}/hooks\"\n    headers = {\n        'Authorization': f'token {installation_token}',\n        'Accept': 'application/vnd.github.v3+json'\n    }\n    webhook_url = os.getenv(\"WEBHOOK_URL\", \"http://localhost:5000/webhook\")\n    data = {\n        \"name\": \"web\",",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "verify_signature",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def verify_signature(payload, signature):\n    if not GITHUB_WEBHOOK_SECRET:\n        return True\n    expected_signature = hmac.new(GITHUB_WEBHOOK_SECRET.encode(), payload, hashlib.sha256).hexdigest()\n    expected_signature = f\"sha256={expected_signature}\"\n    return hmac.compare_digest(expected_signature, signature)\n@app.route('/webhook', methods=['POST'])\ndef github_webhook():\n    payload = request.get_data()\n    signature = request.headers.get('X-Hub-Signature-256')",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "github_webhook",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def github_webhook():\n    payload = request.get_data()\n    signature = request.headers.get('X-Hub-Signature-256')\n    if not verify_signature(payload, signature):\n        return jsonify({'error': 'Invalid signature'}), 403\n    event = request.headers.get('X-GitHub-Event')\n    data = request.get_json()\n    if event == 'pull_request':\n        action = data.get('action')\n        if action in ['opened', 'synchronize', 'reopened']:",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "run_analysis",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def run_analysis(repo_name, pr_number, installation_token):\n    try:\n        # Temporarily set the token for this analysis\n        original_token = os.environ.get('GITHUB_TOKEN')\n        os.environ['GITHUB_TOKEN'] = installation_token\n        result = code_review_agent.invoke({\n            \"repo_name\": repo_name,\n            \"pr_number\": pr_number,\n            \"code_changes\": [],\n            \"feedback\": []",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "install_app",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def install_app():\n    \"\"\"Redirect to GitHub App installation\"\"\"\n    github_url = f\"https://github.com/apps/{GITHUB_APP_NAME}/installations/new\"\n    # Tell GitHub to redirect back to our callback after installation\n    callback = f\"{BACKEND_URL}/github/callback\"\n    github_url = f\"https://github.com/apps/{GITHUB_APP_NAME}/installations/new?redirect_url={quote_plus(callback)}\"\n    return redirect(github_url)\n@app.route('/github/callback')\ndef github_callback():\n    \"\"\"Handle GitHub App installation callback\"\"\"",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "github_callback",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def github_callback():\n    \"\"\"Handle GitHub App installation callback\"\"\"\n    installation_id = request.args.get('installation_id')\n    setup_action = request.args.get('setup_action')\n    if setup_action == 'install' and installation_id:\n        # Get installation token\n        try:\n            token = get_installation_token(installation_id)\n            # Get list of repositories for this installation\n            url = f\"https://api.github.com/installation/repositories\"",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "health",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def health():\n    return jsonify({'status': 'healthy'}), 200\n@app.route('/link-repo', methods=['POST'])\ndef link_repo():\n    # For GitHub App, linking is done through installation\n    return jsonify({'message': 'Please install the GitHub App to link repositories automatically'}), 200\nif __name__ == '__main__':\n    app.run(debug=True, port=5000)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "link_repo",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def link_repo():\n    # For GitHub App, linking is done through installation\n    return jsonify({'message': 'Please install the GitHub App to link repositories automatically'}), 200\nif __name__ == '__main__':\n    app.run(debug=True, port=5000)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = os.getenv(\"FLASK_SECRET_KEY\", \"dev-secret-key\")\n# GitHub App configuration\nGITHUB_APP_ID = os.getenv(\"GITHUB_APP_ID\")\nGITHUB_PRIVATE_KEY = os.getenv(\"GITHUB_PRIVATE_KEY\")\nGITHUB_WEBHOOK_SECRET = os.getenv(\"GITHUB_WEBHOOK_SECRET\")\nGITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app.secret_key = os.getenv(\"FLASK_SECRET_KEY\", \"dev-secret-key\")\n# GitHub App configuration\nGITHUB_APP_ID = os.getenv(\"GITHUB_APP_ID\")\nGITHUB_PRIVATE_KEY = os.getenv(\"GITHUB_PRIVATE_KEY\")\nGITHUB_WEBHOOK_SECRET = os.getenv(\"GITHUB_WEBHOOK_SECRET\")\nGITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "GITHUB_APP_ID",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "GITHUB_APP_ID = os.getenv(\"GITHUB_APP_ID\")\nGITHUB_PRIVATE_KEY = os.getenv(\"GITHUB_PRIVATE_KEY\")\nGITHUB_WEBHOOK_SECRET = os.getenv(\"GITHUB_WEBHOOK_SECRET\")\nGITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "GITHUB_PRIVATE_KEY",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "GITHUB_PRIVATE_KEY = os.getenv(\"GITHUB_PRIVATE_KEY\")\nGITHUB_WEBHOOK_SECRET = os.getenv(\"GITHUB_WEBHOOK_SECRET\")\nGITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "GITHUB_WEBHOOK_SECRET",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "GITHUB_WEBHOOK_SECRET = os.getenv(\"GITHUB_WEBHOOK_SECRET\")\nGITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "GITHUB_CLIENT_ID",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "GITHUB_CLIENT_ID = os.getenv(\"GITHUB_CLIENT_ID\")\nGITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {\n        'iat': now,",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "GITHUB_CLIENT_SECRET",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "GITHUB_CLIENT_SECRET = os.getenv(\"GITHUB_CLIENT_SECRET\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {\n        'iat': now,\n        'exp': now + (10 * 60),  # 10 minutes",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "FRONTEND_URL",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "FRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:5173\")\nGITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {\n        'iat': now,\n        'exp': now + (10 * 60),  # 10 minutes\n        'iss': GITHUB_APP_ID",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "GITHUB_APP_NAME",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "GITHUB_APP_NAME = os.getenv(\"GITHUB_APP_NAME\", \"smartreview\")\nBACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {\n        'iat': now,\n        'exp': now + (10 * 60),  # 10 minutes\n        'iss': GITHUB_APP_ID\n    }",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "BACKEND_URL",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "BACKEND_URL = os.getenv(\"BACKEND_URL\", \"http://localhost:5000\")\ndef get_github_app_token():\n    \"\"\"Generate JWT for GitHub App authentication\"\"\"\n    now = int(time.time())\n    payload = {\n        'iat': now,\n        'exp': now + (10 * 60),  # 10 minutes\n        'iss': GITHUB_APP_ID\n    }\n    # Load private key",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "CodeReviewState",
        "kind": 6,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "class CodeReviewState(TypedDict):\n    repo_name: str\n    pr_number: int\n    code_changes: List[str]\n    feedback: List[str]\n# Set up Groq LLM\nllm = ChatGroq(\n    model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n )\n# Fetch PR changes",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "fetch_pr_changes",
        "kind": 2,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "def fetch_pr_changes(state: CodeReviewState):\n    repo_name = state[\"repo_name\"]\n    pr_number = state[\"pr_number\"]\n    g = Github(os.getenv(\"GITHUB_TOKEN\"))\n    repo = g.get_repo(repo_name)\n    pr = repo.get_pull(pr_number)\n    files = pr.get_files()\n    code_changes = []\n    for file in files:\n        if file.patch:",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "analyze_code",
        "kind": 2,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "def analyze_code(state: CodeReviewState):\n    code_changes = state[\"code_changes\"]\n    all_code = \"\\n\\n\".join(code_changes)\n    # Read the prompt from prompt.txt\n    with open(\"prompt.txt\", \"r\", encoding=\"utf-8\") as f:\n        prompt_template = f.read()\n    # Replace the placeholder with the actual code\n    prompt = prompt_template.replace(\"{all_code}\", all_code)\n    response = llm.invoke([SystemMessage(content=\"You are a code review expert.\"), HumanMessage(content=prompt)])\n    analysis = response.content",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "provide_feedback",
        "kind": 2,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "def provide_feedback(state: CodeReviewState):\n    feedback = state[\"feedback\"][0] if state[\"feedback\"] else \"No feedback generated.\"\n    professional_feedback = f\"\"\"## 🤖 AI Code Review Analysis\n{feedback}\n---\n*This review was generated automatically by the SmartReview AI agent. Please review the suggestions and address any critical issues before merging.*\"\"\"\n    return {\"feedback\": [professional_feedback]}\n# Post feedback\ndef post_feedback(state: CodeReviewState):\n    repo_name = state[\"repo_name\"]",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "post_feedback",
        "kind": 2,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "def post_feedback(state: CodeReviewState):\n    repo_name = state[\"repo_name\"]\n    pr_number = state[\"pr_number\"]\n    feedback = state[\"feedback\"][0] if state[\"feedback\"] else \"No feedback generated.\"\n    g = Github(os.getenv(\"GITHUB_TOKEN\"))\n    repo = g.get_repo(repo_name)\n    pr = repo.get_pull(pr_number)\n    pr.create_issue_comment(feedback)\n    return {}\n# Build the graph",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "llm = ChatGroq(\n    model=\"meta-llama/llama-4-scout-17b-16e-instruct\",\n )\n# Fetch PR changes\ndef fetch_pr_changes(state: CodeReviewState):\n    repo_name = state[\"repo_name\"]\n    pr_number = state[\"pr_number\"]\n    g = Github(os.getenv(\"GITHUB_TOKEN\"))\n    repo = g.get_repo(repo_name)\n    pr = repo.get_pull(pr_number)",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "graph = StateGraph(CodeReviewState)\ngraph.add_node(\"fetch_pr\", fetch_pr_changes)\ngraph.add_node(\"analyze\", analyze_code)\ngraph.add_node(\"feedback\", provide_feedback)\ngraph.add_node(\"post\", post_feedback)\ngraph.add_edge(START, \"fetch_pr\")\ngraph.add_edge(\"fetch_pr\", \"analyze\")\ngraph.add_edge(\"analyze\", \"feedback\")\ngraph.add_edge(\"feedback\", \"post\")\ngraph.add_edge(\"post\", END)",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "code_review_agent",
        "kind": 5,
        "importPath": "backend.code_review_agent",
        "description": "backend.code_review_agent",
        "peekOfCode": "code_review_agent = graph.compile()\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 3:\n        sys.exit(1)\n    repo_name = sys.argv[1]\n    pr_number = int(sys.argv[2])\n    result = code_review_agent.invoke({\n        \"repo_name\": repo_name,\n        \"pr_number\": pr_number,",
        "detail": "backend.code_review_agent",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]